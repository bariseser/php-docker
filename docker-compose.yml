version: '3'

networks:
  backend:
    driver: bridge

services:

  nginx:
    container_name: "${PROJECT_NAME}_nginx"
    build:
      context: ./nginx
      args:
        - http_proxy
        - https_proxy
        - no_proxy
    volumes:
      - ${APP_CODE_BASE_PATH}:${APP_CODE_PATH_CONTAINER}
      - ${LOGS_PATH_HOST}/nginx:/var/log/nginx
      - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
      - ${NGINX_SSL_PATH}:/etc/nginx/ssl
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "${NGINX_HOST_HTTP_PORT}:80"
      - "${NGINX_HOST_HTTPS_PORT}:443"
    networks:
      - backend
    restart: always
    depends_on:
      - php

  php:
    container_name: "${PROJECT_NAME}_php"
    build:
      context: ./php-fpm
      args:
        - PHP_VERSION=${PHP_VERSION}
        - http_proxy
        - https_proxy
        - no_proxy
    volumes:
      - ./php-fpm/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
      - ${APP_CODE_BASE_PATH}:${APP_CODE_PATH_CONTAINER}
    expose:
      - "${PHP_FPM_PORT}"
    networks:
      - backend
    restart: always

  redis:
    container_name: "${PROJECT_NAME}_redis"
    build: ./redis
    volumes:
      - ${DATA_PATH_HOST}/redis:/data
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - backend
    restart: always

  redis-webui:
    container_name: "${PROJECT_NAME}_redisui"
    build:
      context: ./redis-webui
    environment:
      - REDIS_1_HOST=${REDIS_WEBUI_CONNECT_HOST}
      - REDIS_1_PORT=${REDIS_WEBUI_CONNECT_PORT}
    networks:
      - backend
    ports:
      - "${REDIS_WEBUI_PORT}:80"
    depends_on:
      - redis
    restart: always

  mysql:
    container_name: "${PROJECT_NAME}_mysql"
    build:
      context: ./mysql
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${WORKSPACE_TIMEZONE}
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
    ports:
      - "${MYSQL_PORT}:3306"
    networks:
      - backend
    restart: always

  rabbitmq:
    container_name: "${PROJECT_NAME}_rabbitmq"
    image: "rabbitmq:3-management"
    environment:
      RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS}"
      RABBITMQ_DEFAULT_HOST: "/"
    networks:
      - backend
    restart: always
    ports:
      - "${RABBIT_HOST_PORT1}:${RABBIT_CONTAINER_PORT1}"
      - "${RABBIT_HOST_PORT2}:${RABBIT_CONTAINER_PORT2}"

  phpmyadmin:
    container_name: "${PROJECT_NAME}_phpmyadmin"
    depends_on:
      - mysql
    image: phpmyadmin/phpmyadmin
    ports:
      - '${MYADMIN_HOST_PORT}:${MYADMIN_CONTAINER_PORT}'
    environment:
      PMA_HOST: mysql
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    networks:
      - backend
    restart: always

  mongo:
    container_name: "${PROJECT_NAME}_mongo"
    image: mongo
    ports:
      - "${MONGO_HOST_PORT}:${MONGO_CONTAINER_PORT}"
    volumes:
      - ${DATA_PATH_HOST}/mongo:/data/db
    networks:
      - backend
    restart: always

  elasticsearch:
    container_name: "${PROJECT_NAME}_elastic"
    build:
      context: ./elasticsearch
      args:
        - ELASTICSEARCH_VERSION=${ELASTICSEARCH_VERSION}
    volumes:
      - ${DATA_PATH_HOST}/elasticsearch:/usr/share/elasticsearch/data
      - ${ELASTICSEARCH_CONFIG_PATH}/${ELASTICSEARCH_VERSION}/logging.yml:/usr/share/elasticsearch/config/logging.yml
    environment:
      - cluster.name=${ELASTICSEARCH_CLUSTER_NAME}
      - node.name=${ELASTICSEARCH_CLUSTER_NODE}
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.initial_master_nodes=${ELASTICSEARCH_CLUSTER_NODE}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "${ELASTICSEARCH_HOST_HTTP_PORT}:${ELASTICSEARCH_HOST_HTTP_PORT}"
      - "${ELASTICSEARCH_HOST_TRANSPORT_PORT}:${ELASTICSEARCH_HOST_TRANSPORT_PORT}"
    networks:
      - backend
    restart: always

  kibana:
    container_name: "${PROJECT_NAME}_kibana"
    build:
      context: ./kibana
      args:
        - KIBANA_VERSION=${KIBANA_VERSION}
        - KIBANA_HTTP_PORT=${KIBANA_HTTP_PORT}
    ports:
      - "${KIBANA_HTTP_PORT}:${KIBANA_HTTP_PORT}"
    depends_on:
      - elasticsearch
    networks:
      - backend
    restart: always

  mssql:
    container_name: "${PROJECT_NAME}_mssql"
    build:
      context: ./mssql
    ports:
      - "1433:1433"
    environment:
      SA_PASSWORD: "Pu8Gge2X"
      ACCEPT_EULA: "Y"
    volumes:
      - ${DATA_PATH_HOST}/mssql:/var/opt/mssql/backup
    networks:
      - backend
    restart: always